stages:
  - pull
  - build
  - lint
  - test
  - push
  - deploy
  - cleanup

before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"

pull:
  stage: pull
  allow_failure: true
  script:
    - docker pull "$CI_REGISTRY_IMAGE":latest

build:
  stage: build
  script:
    - docker build --tag="$CI_PIPELINE_ID":"$CI_BUILD_REF_NAME" --cache-from="$CI_REGISTRY_IMAGE":latest --pull .

lint:
  stage: lint
  script:
    - export CI_PIPELINE_ID=$CI_PIPELINE_ID
    - export CI_BUILD_REF_NAME=$CI_BUILD_REF_NAME
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose.ci.yml run project sh /scripts/lint.sh

test:
  stage: test
  coverage: /^TOTAL\s*:\s*([^%]+)/
  script:
    - export CI_PIPELINE_ID=$CI_PIPELINE_ID
    - export CI_BUILD_REF_NAME=$CI_BUILD_REF_NAME
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose.ci.yml run project sh /scripts/test.sh
  artifacts:
    paths:
      - htmlcov

push image:
  stage: push
  only:
    - master
    - sit
    - uat
    - tags
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_BUILD_REF_NAME" "$CI_REGISTRY_IMAGE":"$CI_BUILD_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE":"$CI_BUILD_REF_NAME"

push latest:
  stage: push
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_BUILD_REF_NAME" "$CI_REGISTRY_IMAGE":latest
    - docker push "$CI_REGISTRY_IMAGE":latest

cleanup:
  stage: cleanup
  when: always
  script:
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose.ci.yml down --remove-orphans
    - docker rmi -f "$CI_PIPELINE_ID":"$CI_BUILD_REF_NAME"

deploy:
  when: manual
  stage: deploy
  only:
    - master
    - tags
  script:
    - echo "deploying version $(git describe --always --tags) to $HOST"
    - git clone https://gitlab-ci-token:$CI_BUILD_TOKEN@gitlab.propulsion-home.ch/full-stack/batch-2019-02/personal-projects/eskin/config.git config-repo
    - mkdir -p ./config && cp -r ./config-repo/* ./config/

    - echo "create volumes and network for very first deployment"
    - docker network create eskin || true
    - docker volume create --name=frontend || true
    - docker volume create --name=media-files || true
    - docker volume create --name=static-files || true

    - docker-compose -f docker-compose.deploy.yml pull
    - docker-compose -f docker-compose.deploy.yml down --remove-orphans
    - docker-compose -f docker-compose.deploy.yml up -d
