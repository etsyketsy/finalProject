# Generated by Django 2.0.3 on 2019-04-22 07:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnatomicalPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('Abdomen', 'Abdomen'), ('Leg', 'Leg'), ('Breast', 'Breast'), ('Scalp', 'Scalp'), ('Other', 'Other')], max_length=150, null=True, verbose_name='Anatomical Part')),
            ],
        ),
        migrations.CreateModel(
            name='Biopsy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surgery_date', models.DateField(blank=True, null=True, verbose_name='Surgery Date')),
                ('skin_thickness', models.FloatField(blank=True, null=True, verbose_name='Skin Thickness')),
                ('skin_area', models.FloatField(blank=True, null=True, verbose_name='Skin Area')),
                ('anatomical_part', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='biopsies', to='api.AnatomicalPart', verbose_name='Anatomical Part')),
            ],
            options={
                'verbose_name_plural': 'Biopsies',
                'ordering': ['-surgery_date'],
            },
        ),
        migrations.CreateModel(
            name='CellCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('Keratinocytes', 'Keratinocytes'), ('Melanocytes', 'Melanocytes'), ('Fibroblast', 'Fibroblast')], max_length=100, null=True, verbose_name='Type')),
            ],
            options={
                'verbose_name_plural': 'Cell categories',
            },
        ),
        migrations.CreateModel(
            name='CellCounting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='Media Files', verbose_name='Cell Counting Image')),
                ('cells_counted', models.IntegerField(verbose_name='Cells Counted')),
            ],
        ),
        migrations.CreateModel(
            name='CellDistribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('Equally dispersed', 'Equally dispersed'), ('Colony-like growth', 'Colony-like growth'), ('Other', 'Other')], max_length=100, null=True, verbose_name='type')),
            ],
        ),
        migrations.CreateModel(
            name='CellType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temperature')),
                ('digestion_time', models.DateTimeField(blank=True, null=True, verbose_name='Digestion Time')),
                ('inhibition', models.IntegerField(blank=True, null=True, verbose_name='Inhibition')),
                ('filter_size', models.IntegerField(blank=True, null=True, verbose_name='Filter Size')),
                ('filter_rinsing', models.IntegerField(blank=True, null=True, verbose_name='Filter Rinsing')),
                ('centrifugation_speed', models.IntegerField(blank=True, null=True, verbose_name='Centrifugation Speed')),
                ('centrifugation_time', models.DateTimeField(blank=True, null=True, verbose_name='Centrifugation Time')),
                ('resuspended_volume', models.IntegerField(blank=True, null=True, verbose_name='Resuspended Volume')),
                ('concentration', models.FloatField(blank=True, null=True, verbose_name='Concentration')),
                ('viability', models.FloatField(blank=True, null=True, verbose_name='Viability')),
                ('diameter', models.FloatField(blank=True, null=True, verbose_name='Diameter')),
            ],
        ),
        migrations.CreateModel(
            name='Coating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Name')),
                ('lot_number', models.CharField(blank=True, max_length=150, null=True, verbose_name='Coating Lot Number')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='ContainerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('Flask', 'Flask'), ('Vial', 'Vial'), ('Well plate', 'Well plate'), ('Quantum', 'Quantum'), ('DenovoSkin', 'DenovoSkin'), ('Other', 'Other')], max_length=100, null=True, verbose_name='type')),
            ],
        ),
        migrations.CreateModel(
            name='CutMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(blank=True, max_length=150, null=True, verbose_name='Cut Method')),
            ],
        ),
        migrations.CreateModel(
            name='Donor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('M', 'M'), ('F', 'F')], max_length=150, verbose_name='Donor')),
                ('age', models.IntegerField(verbose_name='Age')),
                ('donor_reference', models.CharField(blank=True, max_length=150, null=True, verbose_name='Donor Reference')),
            ],
        ),
        migrations.CreateModel(
            name='Enzyme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Name')),
                ('lot_number', models.CharField(blank=True, max_length=150, null=True, verbose_name='Lot Number')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalAnatomicalPart',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('Abdomen', 'Abdomen'), ('Leg', 'Leg'), ('Breast', 'Breast'), ('Scalp', 'Scalp'), ('Other', 'Other')], max_length=150, null=True, verbose_name='Anatomical Part')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical anatomical part',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBiopsy',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('surgery_date', models.DateField(blank=True, null=True, verbose_name='Surgery Date')),
                ('skin_thickness', models.FloatField(blank=True, null=True, verbose_name='Skin Thickness')),
                ('skin_area', models.FloatField(blank=True, null=True, verbose_name='Skin Area')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('anatomical_part', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.AnatomicalPart', verbose_name='Anatomical Part')),
                ('donor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Donor', verbose_name='Donor')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical biopsy',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCellCategory',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('Keratinocytes', 'Keratinocytes'), ('Melanocytes', 'Melanocytes'), ('Fibroblast', 'Fibroblast')], max_length=100, null=True, verbose_name='Type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical cell category',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCellCounting',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('image', models.TextField(blank=True, max_length=100, null=True, verbose_name='Cell Counting Image')),
                ('cells_counted', models.IntegerField(verbose_name='Cells Counted')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical cell counting',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCellDistribution',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('Equally dispersed', 'Equally dispersed'), ('Colony-like growth', 'Colony-like growth'), ('Other', 'Other')], max_length=100, null=True, verbose_name='type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical cell distribution',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCellType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temperature')),
                ('digestion_time', models.DateTimeField(blank=True, null=True, verbose_name='Digestion Time')),
                ('inhibition', models.IntegerField(blank=True, null=True, verbose_name='Inhibition')),
                ('filter_size', models.IntegerField(blank=True, null=True, verbose_name='Filter Size')),
                ('filter_rinsing', models.IntegerField(blank=True, null=True, verbose_name='Filter Rinsing')),
                ('centrifugation_speed', models.IntegerField(blank=True, null=True, verbose_name='Centrifugation Speed')),
                ('centrifugation_time', models.DateTimeField(blank=True, null=True, verbose_name='Centrifugation Time')),
                ('resuspended_volume', models.IntegerField(blank=True, null=True, verbose_name='Resuspended Volume')),
                ('concentration', models.FloatField(blank=True, null=True, verbose_name='Concentration')),
                ('viability', models.FloatField(blank=True, null=True, verbose_name='Viability')),
                ('diameter', models.FloatField(blank=True, null=True, verbose_name='Diameter')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('enzyme', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Enzyme', verbose_name='Enzyme')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical cell type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCoating',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Name')),
                ('lot_number', models.CharField(blank=True, max_length=150, null=True, verbose_name='Coating Lot Number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical coating',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalComment',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('content_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.ContentType')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical comment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalContainerType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('Flask', 'Flask'), ('Vial', 'Vial'), ('Well plate', 'Well plate'), ('Quantum', 'Quantum'), ('DenovoSkin', 'DenovoSkin'), ('Other', 'Other')], max_length=100, null=True, verbose_name='type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical container type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCutMethod',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('method', models.CharField(blank=True, max_length=150, null=True, verbose_name='Cut Method')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical cut method',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDonor',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('gender', models.CharField(choices=[('M', 'M'), ('F', 'F')], max_length=150, verbose_name='Donor')),
                ('age', models.IntegerField(verbose_name='Age')),
                ('donor_reference', models.CharField(blank=True, max_length=150, null=True, verbose_name='Donor Reference')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical donor',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEnzyme',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Name')),
                ('lot_number', models.CharField(blank=True, max_length=150, null=True, verbose_name='Lot Number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical enzyme',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLayerType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('Dermis', 'Dermis'), ('Epidermis', 'Epidermis')], max_length=100, null=True, verbose_name='Type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical layer type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMorphology',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.TextField(blank=True, choices=[('Bipolar', 'Bipolar'), ('Spindle-like', 'Spindle-like'), ('Star-like', 'Star-like'), ('Dendrite-like', 'Dendrite-like'), ('Other', 'Other')], max_length=255, null=True, verbose_name='Morphology')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical morphology',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNumbering',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('numbering', models.CharField(db_index=True, max_length=6, verbose_name='Numbering')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical numbering',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPassage',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('morphology_image', models.TextField(blank=True, max_length=100, null=True, verbose_name='Morphology Image')),
                ('passaging_date', models.DateField(blank=True, null=True, verbose_name='Passaging Date')),
                ('digestion_time', models.DateTimeField(blank=True, null=True, verbose_name='Digestion Time')),
                ('digestion_temperature', models.FloatField(blank=True, null=True, verbose_name='Digestion Temperature')),
                ('resuspended_volume', models.IntegerField(blank=True, null=True, verbose_name='Resuspended Volume')),
                ('concentration', models.FloatField(blank=True, null=True, verbose_name='Concentration')),
                ('viability', models.FloatField(blank=True, null=True, verbose_name='Viability')),
                ('diameter', models.FloatField(blank=True, null=True, verbose_name='Diameter')),
                ('container_area', models.FloatField(blank=True, null=True, verbose_name='Container Area')),
                ('coating_concentration_per_cm2', models.FloatField(blank=True, null=True, verbose_name='Coating Concentration per Cm2')),
                ('seeding_density', models.IntegerField(blank=True, null=True, verbose_name='Seeding Density')),
                ('magnification', models.IntegerField(blank=True, null=True, verbose_name='Magnification')),
                ('not_continued', models.BooleanField(default=False, verbose_name='Not Continued')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('cell_distribution', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.CellDistribution', verbose_name='Cell Distribution')),
                ('cell_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.CellType', verbose_name='Cell Type')),
                ('coating', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Coating', verbose_name='Coating')),
                ('container_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.ContainerType', verbose_name='Container Type')),
                ('enzyme', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Enzyme', verbose_name='Enzyme')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical passage',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPigmentation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.TextField(blank=True, choices=[('Pigmented', 'Pigmented'), ('Non-pigmented', 'Non-pigmented')], max_length=255, null=True, verbose_name='Pigmentation')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical pigmentation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSkinLayer',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('separation_time', models.DateTimeField(blank=True, null=True, verbose_name='Separation Time')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temperature')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('enzyme', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Enzyme', verbose_name='Enzyme')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical skin layer',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubBiopsy',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('sub_biopsy_area', models.IntegerField(blank=True, null=True, verbose_name='Sub Biopsy Area')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('biopsy', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Biopsy', verbose_name='Biopsy')),
                ('cut_method', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.CutMethod', verbose_name='Cut Method')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical sub biopsy',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='LayerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('Dermis', 'Dermis'), ('Epidermis', 'Epidermis')], max_length=100, null=True, verbose_name='Type')),
            ],
        ),
        migrations.CreateModel(
            name='Morphology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(blank=True, choices=[('Bipolar', 'Bipolar'), ('Spindle-like', 'Spindle-like'), ('Star-like', 'Star-like'), ('Dendrite-like', 'Dendrite-like'), ('Other', 'Other')], max_length=255, null=True, verbose_name='Morphology')),
            ],
            options={
                'verbose_name_plural': 'Morphologies',
            },
        ),
        migrations.CreateModel(
            name='Numbering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numbering', models.CharField(max_length=6, unique=True, verbose_name='Numbering')),
            ],
        ),
        migrations.CreateModel(
            name='Passage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('morphology_image', models.ImageField(blank=True, null=True, upload_to='Media Files', verbose_name='Morphology Image')),
                ('passaging_date', models.DateField(blank=True, null=True, verbose_name='Passaging Date')),
                ('digestion_time', models.DateTimeField(blank=True, null=True, verbose_name='Digestion Time')),
                ('digestion_temperature', models.FloatField(blank=True, null=True, verbose_name='Digestion Temperature')),
                ('resuspended_volume', models.IntegerField(blank=True, null=True, verbose_name='Resuspended Volume')),
                ('concentration', models.FloatField(blank=True, null=True, verbose_name='Concentration')),
                ('viability', models.FloatField(blank=True, null=True, verbose_name='Viability')),
                ('diameter', models.FloatField(blank=True, null=True, verbose_name='Diameter')),
                ('container_area', models.FloatField(blank=True, null=True, verbose_name='Container Area')),
                ('coating_concentration_per_cm2', models.FloatField(blank=True, null=True, verbose_name='Coating Concentration per Cm2')),
                ('seeding_density', models.IntegerField(blank=True, null=True, verbose_name='Seeding Density')),
                ('magnification', models.IntegerField(blank=True, null=True, verbose_name='Magnification')),
                ('not_continued', models.BooleanField(default=False, verbose_name='Not Continued')),
                ('cell_distribution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passages', to='api.CellDistribution', verbose_name='Cell Distribution')),
                ('cell_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='passages', to='api.CellType', verbose_name='Cell Type')),
                ('coating', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passages', to='api.Coating', verbose_name='Coating')),
                ('container_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passages', to='api.ContainerType', verbose_name='Container Type')),
                ('enzyme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passages', to='api.Enzyme', verbose_name='Enzyme')),
                ('morphology', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passages', to='api.Morphology', verbose_name='Morphology')),
                ('numbering', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='passages', to='api.Numbering', verbose_name='Numbering')),
                ('passage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Related_Passages', to='api.Passage')),
            ],
        ),
        migrations.CreateModel(
            name='Pigmentation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(blank=True, choices=[('Pigmented', 'Pigmented'), ('Non-pigmented', 'Non-pigmented')], max_length=255, null=True, verbose_name='Pigmentation')),
            ],
        ),
        migrations.CreateModel(
            name='SkinLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('separation_time', models.DateTimeField(blank=True, null=True, verbose_name='Separation Time')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temperature')),
                ('enzyme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skin_layers', to='api.Enzyme', verbose_name='Enzyme')),
                ('layer_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skin_layers', to='api.LayerType', verbose_name='Skin Layer Type')),
                ('numbering', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skinlayers', to='api.Numbering', verbose_name='Numbering')),
            ],
        ),
        migrations.CreateModel(
            name='SubBiopsy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_biopsy_area', models.IntegerField(blank=True, null=True, verbose_name='Sub Biopsy Area')),
                ('biopsy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_biopsies', to='api.Biopsy', verbose_name='Biopsy')),
                ('cut_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_biopsies', to='api.CutMethod', verbose_name='Cut Method')),
                ('numbering', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subbiopies', to='api.Numbering', verbose_name='Numbering')),
            ],
            options={
                'verbose_name_plural': 'Sub-biopsies',
            },
        ),
        migrations.AddField(
            model_name='skinlayer',
            name='sub_biopsy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skin_layers', to='api.SubBiopsy', verbose_name='Sub Biopsy'),
        ),
        migrations.AddField(
            model_name='passage',
            name='pigmentation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passages', to='api.Pigmentation', verbose_name='Pigmentation'),
        ),
        migrations.AddField(
            model_name='historicalsubbiopsy',
            name='numbering',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Numbering', verbose_name='Numbering'),
        ),
        migrations.AddField(
            model_name='historicalskinlayer',
            name='layer_type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.LayerType', verbose_name='Skin Layer Type'),
        ),
        migrations.AddField(
            model_name='historicalskinlayer',
            name='numbering',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Numbering', verbose_name='Numbering'),
        ),
        migrations.AddField(
            model_name='historicalskinlayer',
            name='sub_biopsy',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.SubBiopsy', verbose_name='Sub Biopsy'),
        ),
        migrations.AddField(
            model_name='historicalpassage',
            name='morphology',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Morphology', verbose_name='Morphology'),
        ),
        migrations.AddField(
            model_name='historicalpassage',
            name='numbering',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Numbering', verbose_name='Numbering'),
        ),
        migrations.AddField(
            model_name='historicalpassage',
            name='passage',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Passage'),
        ),
        migrations.AddField(
            model_name='historicalpassage',
            name='pigmentation',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Pigmentation', verbose_name='Pigmentation'),
        ),
        migrations.AddField(
            model_name='historicaldonor',
            name='numbering',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Numbering', verbose_name='Numbering'),
        ),
        migrations.AddField(
            model_name='historicalcelltype',
            name='numbering',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Numbering', verbose_name='Numbering'),
        ),
        migrations.AddField(
            model_name='historicalcelltype',
            name='skin_layer',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.SkinLayer', verbose_name='Skin Layer'),
        ),
        migrations.AddField(
            model_name='historicalcelltype',
            name='type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.CellCategory', verbose_name='Cell Category'),
        ),
        migrations.AddField(
            model_name='historicalcellcounting',
            name='passage',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Passage', verbose_name='Passage'),
        ),
        migrations.AddField(
            model_name='historicalbiopsy',
            name='numbering',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.Numbering', verbose_name='Numbering'),
        ),
        migrations.AddField(
            model_name='donor',
            name='numbering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donors', to='api.Numbering', verbose_name='Numbering'),
        ),
        migrations.AddField(
            model_name='celltype',
            name='enzyme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cell_types', to='api.Enzyme', verbose_name='Enzyme'),
        ),
        migrations.AddField(
            model_name='celltype',
            name='numbering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='celltypes', to='api.Numbering', verbose_name='Numbering'),
        ),
        migrations.AddField(
            model_name='celltype',
            name='skin_layer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cell_types', to='api.SkinLayer', verbose_name='Skin Layer'),
        ),
        migrations.AddField(
            model_name='celltype',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cell_types', to='api.CellCategory', verbose_name='Cell Category'),
        ),
        migrations.AddField(
            model_name='cellcounting',
            name='passage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cell_counting', to='api.Passage', verbose_name='Passage'),
        ),
        migrations.AddField(
            model_name='biopsy',
            name='donor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biopsies', to='api.Donor', verbose_name='Donor'),
        ),
        migrations.AddField(
            model_name='biopsy',
            name='numbering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biopsies', to='api.Numbering', verbose_name='Numbering'),
        ),
    ]
